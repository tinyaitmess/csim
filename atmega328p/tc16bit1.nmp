let component = "tc16bit1"
let arch = "ATmega328P"
let license = "GPL"
let io_comp = 1
let copyright = "University of Toulouse 3"
let date = "27/04/2025"

type bit = card(1)
type byte = card(8)


reg TCCR1A [1, byte] 
    //COM1A1 COM1A0 COM1B1 COM1B0 - - WGM11 WGM10
    label = "Timer/Counter Control Register A"
    offset = 0x80
    init = 0


reg TCCR1B [1, byte] 
    // ICNC1 ICES1 – WGM13 WGM12 CS12 CS11 CS10
    label = "Timer/Counter Control Register B"
    offset = 0x81
    init = 0

reg TCCR1C [1, byte] 
    // FOC1A FOC1B
    label = "Timer/Counter Control Register C"
    offset = 0x82
    init = 0

reg TCNT1H [1, byte] 
    label = "Timer/Counter "
    offset = 0x85
    init = 0

reg TCNT1L [1, byte] 
    label = "Timer/Counter "
    offset = 0x84
    init = 0


reg OCR1BH [1, byte] 
    label = "Output Compare Register B High"
    offset = 0x8B
    init = 0

reg OCR1BL [1, byte] 
    label = "Output Compare Register B Low"
    offset = 0x8A
    init = 0

reg ICR1H [1, byte] 
    label = "Input Capture Register High"
    offset = 0x87
    init = 0

reg ICR1L [1, byte] 
    label = "Input Capture Register Low"
    offset = 0x86
    init = 0



reg TIMSK1 [1, byte]
    // - - ICIE1 - - OCIE1B OCIE1A TOIE1
    label = "Timer/Counter Interrupt Mask Register"
    offset = 0x6F
    read_only = 1

reg TIFR1 [1, byte]
    // - - ICF1 - - OCF1B OCF1A TOV1
    label = "Timer/Counter Interrupt Flag Register"
    offset = 0x36
    init = 0

// OUTPUT REGISTERS 
reg OCR1AH [1, byte] 
    label = "Output Compare Register A High"
    offset = 0x89
    init = 0

reg OCR1AL [1, byte] 
    label = "Output Compare Register A Low"
    offset = 0x88
    init = 0


reg CLK [1,bit]
    label = "Software Clock"
    intern = 1
    offset = 0x01
    init = 0

reg OC1A [1,bit]
    label = "Output Compare A"
    offset = 0x03
    output = 1
    init = 0

reg OC1B [1,bit]
    label = "Output Compare B"
    offset = 0x04
    output = 1
    init = 0

reg COUNT_DIR [1, bit]
    label = "Timer Count Direction"
    intern = 1
    offset = 0x05
    init = 0 

event Update
    on_trigger={
        let wgm = (TCCR1B <4..3> << 2 | TCCR1A <1..0>);
        let cs1 = TCCR1B <2..0>;
        let com1a = TCCR1A <7..6>;
        let prescaler =0 ;

        let top = 0xFFFF;
        let ocr1a = (OCR1AH << 8) | OCR1AL;
        let ocr1b = (OCR1BH << 8) | OCR1BL;
        let icr1 = (ICR1H<< 8) | ICR1L;

        switch (cs1) {
            case 0b001 : prescaler = 1;
            case 0b010 : prescaler = 8;
            case 0b011 : prescaler = 64;
            case 0b100 : prescaler = 256;
            case 0b101 : prescaler = 1024;
//            default : cancel update;
        };

        let mode_type = 0; // 0: NORMAL, 1: CTC, 2: PWM, 3: FAST_PWM
        

        if (wgm == 0b0000) then
            mode_type = 0; // NORMAL
        else 
            if (wgm == 0b0100 || wgm == 0b1100) then 
                mode_type = 1; // CTC
        
            else    
                if (wgm == 0b0001 || wgm == 0b0010 || wgm == 0b0011 || wgm == 0b1000 || wgm == 0b1001|| wgm == 0b1010 || wgm == 0b1011) then
                    mode_type = 2; // PWM Phase Correct
            
                else 
                    if (wgm == 0b0101 || wgm == 0b0110 || wgm == 0b0111 || wgm == 0b1110 || wgm == 0b1111) then
                        mode_type = 3; // FAST PWM
                
                    else 
                        mode_type = 0; // fallback (par sécurité)
                    endif;
                endif;
            endif;
        endif;

        // choix de la valeur de TOP
        switch (wgm) {
            case 0b0001 : // Pwm 8-bit
                top = 0x00FF;
            case 0b0101: // Pwm 8-bit
                top = 0x00FF;
            case 0b0010 : // Pwm 9-bit
                top = 0x01FF;
            case 0b0110 : // Pwm 9-bit
                top = 0x01FF;

            case 0b0011 : // Pwm 10-bit
                top = 0x03FF;
            case 0b0111: // Pwm 10-bit
                top = 0x03FF;
            case 0b1010 : 
                top = icr1;
            case 0b1110 : 
                top = icr1;
            case 0b1100: 
                top = icr1;

            case 0b1011 : 
                top = ocr1a;
            case 0b1111 : 
                top = ocr1a;
            case 0b0100: 
                top = ocr1a;
            default : top = 0xFFFF; //mode normal
        };


        let tcnt1 = (TCNT1H << 8) | TCNT1L;

        switch (mode_type){
            // mode NORMAL
            case 0 :
                if tcnt1 == top then
                    tcnt1 =0 ;
                    TIFR1<0..0>=1;
                else 
                    tcnt1 = tcnt1 + 1;
                endif;
            // mode CTC 
            case 1 :
                if tcnt1 == top then
                    tcnt1 = 0;
                    TIFR1<0..0>=1;
                    if wgm == 0b0100 then
                        TIFR1<1..1>=1; // CTC MAJ OCF1A
                        switch (com1a) {
                            case 0b01: OC1A = ~OC1A; // toggle
                            case 0b10: OC1A = 0;     // clear
                            case 0b11: OC1A = 1;     // set
                        };
                    else
                        TIFR1<5..5>=1; // CTC ICR1 
                    endif;
                endif;
            // mode FAST mode
            case 2 :
                if tcnt1 == top then
                    tcnt1 =0;
                    TIFR1<0..0> = 1;
                    if top == ocr1a then
                        TIFR1<1..1>=1; // CTC OCF1A
                        switch (com1a) {
                            case 0b01: OC1A = ~OC1A; // toggle
                            case 0b10: OC1A = 0;     // clear
                            case 0b11: OC1A = 1;     // set
                        };
                    else
                        if top == icr1 then
                            TIFR1<5..5> = 1; // ICR1 mis à 1 au moment du match
                        endif;

                    endif;

                else 
                    tcnt1 = tcnt1 + 1;
                endif;

            // mode PWM up and down
            case 3 :
                if tcnt1 == top then
                    COUNT_DIR = 0;
                    
                    if top == ocr1a then
                        TIFR1<1..1> = 1; // OCF1A mis à 1 au moment du match
                        switch (com1a){
                            case 0b01 : OC1A = ~OC1A;
                            case 0b10 : OC1A = 1;
                            case 0b11 : OC1A = 0;
                        };
                    else 
                        if top == icr1 then
                            TIFR1<5..5> = 1; // ICF1 mis à 1 au moment du match
                        endif;
                    endif;

                else 
                    if tcnt1 == 0 then
                        COUNT_DIR = 1;
                        TIFR1<0..0> = 1; //overflow
                        if top == ocr1a then
                        switch (com1a){
                            case 0b10 : OC1A = 0;
                            case 0b11 : OC1A = 1;
                        };
                        endif;
                    endif;
                        
                endif;

                if COUNT_DIR == 1 then
                    tcnt1 = tcnt1 + 1;
                else
                    tcnt1 = tcnt1 - 1;
                endif;
        };
        TCNT1H = (tcnt1 >> 8);
        TCNT1L = (tcnt1 & 0xFF);

        schedule Update in prescaler ;

    }